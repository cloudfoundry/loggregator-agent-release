// Code generated by counterfeiter. DO NOT EDIT.
package plumbingfakes

import (
	"sync"

	"code.cloudfoundry.org/loggregator-agent-release/src/pkg/plumbing"
)

type FakeDopplerIngestorServerV1 struct {
	plumbing.UnimplementedDopplerIngestorServer

	PusherStub        func(plumbing.DopplerIngestor_PusherServer) error
	pusherMutex       sync.RWMutex
	pusherArgsForCall []struct {
		arg1 plumbing.DopplerIngestor_PusherServer
	}
	pusherReturns struct {
		result1 error
	}
	pusherReturnsOnCall map[int]struct {
		result1 error
	}
	mustEmbedUnimplementedDopplerIngestorServerStub        func()
	mustEmbedUnimplementedDopplerIngestorServerMutex       sync.RWMutex
	mustEmbedUnimplementedDopplerIngestorServerArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDopplerIngestorServerV1) Pusher(arg1 plumbing.DopplerIngestor_PusherServer) error {
	fake.pusherMutex.Lock()
	ret, specificReturn := fake.pusherReturnsOnCall[len(fake.pusherArgsForCall)]
	fake.pusherArgsForCall = append(fake.pusherArgsForCall, struct {
		arg1 plumbing.DopplerIngestor_PusherServer
	}{arg1})
	stub := fake.PusherStub
	fakeReturns := fake.pusherReturns
	fake.recordInvocation("Pusher", []interface{}{arg1})
	fake.pusherMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDopplerIngestorServerV1) PusherCallCount() int {
	fake.pusherMutex.RLock()
	defer fake.pusherMutex.RUnlock()
	return len(fake.pusherArgsForCall)
}

func (fake *FakeDopplerIngestorServerV1) PusherCalls(stub func(plumbing.DopplerIngestor_PusherServer) error) {
	fake.pusherMutex.Lock()
	defer fake.pusherMutex.Unlock()
	fake.PusherStub = stub
}

func (fake *FakeDopplerIngestorServerV1) PusherArgsForCall(i int) plumbing.DopplerIngestor_PusherServer {
	fake.pusherMutex.RLock()
	defer fake.pusherMutex.RUnlock()
	argsForCall := fake.pusherArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDopplerIngestorServerV1) PusherReturns(result1 error) {
	fake.pusherMutex.Lock()
	defer fake.pusherMutex.Unlock()
	fake.PusherStub = nil
	fake.pusherReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDopplerIngestorServerV1) PusherReturnsOnCall(i int, result1 error) {
	fake.pusherMutex.Lock()
	defer fake.pusherMutex.Unlock()
	fake.PusherStub = nil
	if fake.pusherReturnsOnCall == nil {
		fake.pusherReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pusherReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDopplerIngestorServerV1) mustEmbedUnimplementedDopplerIngestorServer() {
	fake.mustEmbedUnimplementedDopplerIngestorServerMutex.Lock()
	fake.mustEmbedUnimplementedDopplerIngestorServerArgsForCall = append(fake.mustEmbedUnimplementedDopplerIngestorServerArgsForCall, struct {
	}{})
	stub := fake.mustEmbedUnimplementedDopplerIngestorServerStub
	fake.recordInvocation("mustEmbedUnimplementedDopplerIngestorServer", []interface{}{})
	fake.mustEmbedUnimplementedDopplerIngestorServerMutex.Unlock()
	if stub != nil {
		fake.mustEmbedUnimplementedDopplerIngestorServerStub()
	}
}

func (fake *FakeDopplerIngestorServerV1) MustEmbedUnimplementedDopplerIngestorServerCallCount() int {
	fake.mustEmbedUnimplementedDopplerIngestorServerMutex.RLock()
	defer fake.mustEmbedUnimplementedDopplerIngestorServerMutex.RUnlock()
	return len(fake.mustEmbedUnimplementedDopplerIngestorServerArgsForCall)
}

func (fake *FakeDopplerIngestorServerV1) MustEmbedUnimplementedDopplerIngestorServerCalls(stub func()) {
	fake.mustEmbedUnimplementedDopplerIngestorServerMutex.Lock()
	defer fake.mustEmbedUnimplementedDopplerIngestorServerMutex.Unlock()
	fake.mustEmbedUnimplementedDopplerIngestorServerStub = stub
}

func (fake *FakeDopplerIngestorServerV1) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pusherMutex.RLock()
	defer fake.pusherMutex.RUnlock()
	fake.mustEmbedUnimplementedDopplerIngestorServerMutex.RLock()
	defer fake.mustEmbedUnimplementedDopplerIngestorServerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDopplerIngestorServerV1) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plumbing.DopplerIngestorServerV1 = new(FakeDopplerIngestorServerV1)
