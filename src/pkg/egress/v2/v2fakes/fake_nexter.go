// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/go-loggregator/v10/rpc/loggregator_v2"
	v2 "code.cloudfoundry.org/loggregator-agent-release/src/pkg/egress/v2"
)

type FakeNexter struct {
	TryNextStub        func() (*loggregator_v2.Envelope, bool)
	tryNextMutex       sync.RWMutex
	tryNextArgsForCall []struct {
	}
	tryNextReturns struct {
		result1 *loggregator_v2.Envelope
		result2 bool
	}
	tryNextReturnsOnCall map[int]struct {
		result1 *loggregator_v2.Envelope
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNexter) TryNext() (*loggregator_v2.Envelope, bool) {
	fake.tryNextMutex.Lock()
	ret, specificReturn := fake.tryNextReturnsOnCall[len(fake.tryNextArgsForCall)]
	fake.tryNextArgsForCall = append(fake.tryNextArgsForCall, struct {
	}{})
	stub := fake.TryNextStub
	fakeReturns := fake.tryNextReturns
	fake.recordInvocation("TryNext", []interface{}{})
	fake.tryNextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNexter) TryNextCallCount() int {
	fake.tryNextMutex.RLock()
	defer fake.tryNextMutex.RUnlock()
	return len(fake.tryNextArgsForCall)
}

func (fake *FakeNexter) TryNextCalls(stub func() (*loggregator_v2.Envelope, bool)) {
	fake.tryNextMutex.Lock()
	defer fake.tryNextMutex.Unlock()
	fake.TryNextStub = stub
}

func (fake *FakeNexter) TryNextReturns(result1 *loggregator_v2.Envelope, result2 bool) {
	fake.tryNextMutex.Lock()
	defer fake.tryNextMutex.Unlock()
	fake.TryNextStub = nil
	fake.tryNextReturns = struct {
		result1 *loggregator_v2.Envelope
		result2 bool
	}{result1, result2}
}

func (fake *FakeNexter) TryNextReturnsOnCall(i int, result1 *loggregator_v2.Envelope, result2 bool) {
	fake.tryNextMutex.Lock()
	defer fake.tryNextMutex.Unlock()
	fake.TryNextStub = nil
	if fake.tryNextReturnsOnCall == nil {
		fake.tryNextReturnsOnCall = make(map[int]struct {
			result1 *loggregator_v2.Envelope
			result2 bool
		})
	}
	fake.tryNextReturnsOnCall[i] = struct {
		result1 *loggregator_v2.Envelope
		result2 bool
	}{result1, result2}
}

func (fake *FakeNexter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryNextMutex.RLock()
	defer fake.tryNextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNexter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.Nexter = new(FakeNexter)
