// Code generated by counterfeiter. DO NOT EDIT.
package bindingsfakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/loggregator-agent-release/src/pkg/ingress/bindings"
)

type FakeIPChecker struct {
	CheckBlacklistStub        func(net.IP) error
	checkBlacklistMutex       sync.RWMutex
	checkBlacklistArgsForCall []struct {
		arg1 net.IP
	}
	checkBlacklistReturns struct {
		result1 error
	}
	checkBlacklistReturnsOnCall map[int]struct {
		result1 error
	}
	ResolveAddrStub        func(string) (net.IP, error)
	resolveAddrMutex       sync.RWMutex
	resolveAddrArgsForCall []struct {
		arg1 string
	}
	resolveAddrReturns struct {
		result1 net.IP
		result2 error
	}
	resolveAddrReturnsOnCall map[int]struct {
		result1 net.IP
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIPChecker) CheckBlacklist(arg1 net.IP) error {
	fake.checkBlacklistMutex.Lock()
	ret, specificReturn := fake.checkBlacklistReturnsOnCall[len(fake.checkBlacklistArgsForCall)]
	fake.checkBlacklistArgsForCall = append(fake.checkBlacklistArgsForCall, struct {
		arg1 net.IP
	}{arg1})
	stub := fake.CheckBlacklistStub
	fakeReturns := fake.checkBlacklistReturns
	fake.recordInvocation("CheckBlacklist", []interface{}{arg1})
	fake.checkBlacklistMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIPChecker) CheckBlacklistCallCount() int {
	fake.checkBlacklistMutex.RLock()
	defer fake.checkBlacklistMutex.RUnlock()
	return len(fake.checkBlacklistArgsForCall)
}

func (fake *FakeIPChecker) CheckBlacklistCalls(stub func(net.IP) error) {
	fake.checkBlacklistMutex.Lock()
	defer fake.checkBlacklistMutex.Unlock()
	fake.CheckBlacklistStub = stub
}

func (fake *FakeIPChecker) CheckBlacklistArgsForCall(i int) net.IP {
	fake.checkBlacklistMutex.RLock()
	defer fake.checkBlacklistMutex.RUnlock()
	argsForCall := fake.checkBlacklistArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIPChecker) CheckBlacklistReturns(result1 error) {
	fake.checkBlacklistMutex.Lock()
	defer fake.checkBlacklistMutex.Unlock()
	fake.CheckBlacklistStub = nil
	fake.checkBlacklistReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIPChecker) CheckBlacklistReturnsOnCall(i int, result1 error) {
	fake.checkBlacklistMutex.Lock()
	defer fake.checkBlacklistMutex.Unlock()
	fake.CheckBlacklistStub = nil
	if fake.checkBlacklistReturnsOnCall == nil {
		fake.checkBlacklistReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkBlacklistReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIPChecker) ResolveAddr(arg1 string) (net.IP, error) {
	fake.resolveAddrMutex.Lock()
	ret, specificReturn := fake.resolveAddrReturnsOnCall[len(fake.resolveAddrArgsForCall)]
	fake.resolveAddrArgsForCall = append(fake.resolveAddrArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ResolveAddrStub
	fakeReturns := fake.resolveAddrReturns
	fake.recordInvocation("ResolveAddr", []interface{}{arg1})
	fake.resolveAddrMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIPChecker) ResolveAddrCallCount() int {
	fake.resolveAddrMutex.RLock()
	defer fake.resolveAddrMutex.RUnlock()
	return len(fake.resolveAddrArgsForCall)
}

func (fake *FakeIPChecker) ResolveAddrCalls(stub func(string) (net.IP, error)) {
	fake.resolveAddrMutex.Lock()
	defer fake.resolveAddrMutex.Unlock()
	fake.ResolveAddrStub = stub
}

func (fake *FakeIPChecker) ResolveAddrArgsForCall(i int) string {
	fake.resolveAddrMutex.RLock()
	defer fake.resolveAddrMutex.RUnlock()
	argsForCall := fake.resolveAddrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIPChecker) ResolveAddrReturns(result1 net.IP, result2 error) {
	fake.resolveAddrMutex.Lock()
	defer fake.resolveAddrMutex.Unlock()
	fake.ResolveAddrStub = nil
	fake.resolveAddrReturns = struct {
		result1 net.IP
		result2 error
	}{result1, result2}
}

func (fake *FakeIPChecker) ResolveAddrReturnsOnCall(i int, result1 net.IP, result2 error) {
	fake.resolveAddrMutex.Lock()
	defer fake.resolveAddrMutex.Unlock()
	fake.ResolveAddrStub = nil
	if fake.resolveAddrReturnsOnCall == nil {
		fake.resolveAddrReturnsOnCall = make(map[int]struct {
			result1 net.IP
			result2 error
		})
	}
	fake.resolveAddrReturnsOnCall[i] = struct {
		result1 net.IP
		result2 error
	}{result1, result2}
}

func (fake *FakeIPChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkBlacklistMutex.RLock()
	defer fake.checkBlacklistMutex.RUnlock()
	fake.resolveAddrMutex.RLock()
	defer fake.resolveAddrMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIPChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bindings.IPChecker = new(FakeIPChecker)
