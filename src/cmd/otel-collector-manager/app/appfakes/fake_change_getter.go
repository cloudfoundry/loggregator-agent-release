// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"sync"

	"code.cloudfoundry.org/loggregator-agent-release/src/cmd/otel-collector-manager/app"
)

type FakeChangeGetter struct {
	ChangedStub        func() bool
	changedMutex       sync.RWMutex
	changedArgsForCall []struct {
	}
	changedReturns struct {
		result1 bool
	}
	changedReturnsOnCall map[int]struct {
		result1 bool
	}
	GetAggregateMetricStub        func() (map[string]any, error)
	getAggregateMetricMutex       sync.RWMutex
	getAggregateMetricArgsForCall []struct {
	}
	getAggregateMetricReturns struct {
		result1 map[string]any
		result2 error
	}
	getAggregateMetricReturnsOnCall map[int]struct {
		result1 map[string]any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChangeGetter) Changed() bool {
	fake.changedMutex.Lock()
	ret, specificReturn := fake.changedReturnsOnCall[len(fake.changedArgsForCall)]
	fake.changedArgsForCall = append(fake.changedArgsForCall, struct {
	}{})
	stub := fake.ChangedStub
	fakeReturns := fake.changedReturns
	fake.recordInvocation("Changed", []interface{}{})
	fake.changedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeChangeGetter) ChangedCallCount() int {
	fake.changedMutex.RLock()
	defer fake.changedMutex.RUnlock()
	return len(fake.changedArgsForCall)
}

func (fake *FakeChangeGetter) ChangedCalls(stub func() bool) {
	fake.changedMutex.Lock()
	defer fake.changedMutex.Unlock()
	fake.ChangedStub = stub
}

func (fake *FakeChangeGetter) ChangedReturns(result1 bool) {
	fake.changedMutex.Lock()
	defer fake.changedMutex.Unlock()
	fake.ChangedStub = nil
	fake.changedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeChangeGetter) ChangedReturnsOnCall(i int, result1 bool) {
	fake.changedMutex.Lock()
	defer fake.changedMutex.Unlock()
	fake.ChangedStub = nil
	if fake.changedReturnsOnCall == nil {
		fake.changedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.changedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeChangeGetter) GetAggregateMetric() (map[string]any, error) {
	fake.getAggregateMetricMutex.Lock()
	ret, specificReturn := fake.getAggregateMetricReturnsOnCall[len(fake.getAggregateMetricArgsForCall)]
	fake.getAggregateMetricArgsForCall = append(fake.getAggregateMetricArgsForCall, struct {
	}{})
	stub := fake.GetAggregateMetricStub
	fakeReturns := fake.getAggregateMetricReturns
	fake.recordInvocation("GetAggregateMetric", []interface{}{})
	fake.getAggregateMetricMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChangeGetter) GetAggregateMetricCallCount() int {
	fake.getAggregateMetricMutex.RLock()
	defer fake.getAggregateMetricMutex.RUnlock()
	return len(fake.getAggregateMetricArgsForCall)
}

func (fake *FakeChangeGetter) GetAggregateMetricCalls(stub func() (map[string]any, error)) {
	fake.getAggregateMetricMutex.Lock()
	defer fake.getAggregateMetricMutex.Unlock()
	fake.GetAggregateMetricStub = stub
}

func (fake *FakeChangeGetter) GetAggregateMetricReturns(result1 map[string]any, result2 error) {
	fake.getAggregateMetricMutex.Lock()
	defer fake.getAggregateMetricMutex.Unlock()
	fake.GetAggregateMetricStub = nil
	fake.getAggregateMetricReturns = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *FakeChangeGetter) GetAggregateMetricReturnsOnCall(i int, result1 map[string]any, result2 error) {
	fake.getAggregateMetricMutex.Lock()
	defer fake.getAggregateMetricMutex.Unlock()
	fake.GetAggregateMetricStub = nil
	if fake.getAggregateMetricReturnsOnCall == nil {
		fake.getAggregateMetricReturnsOnCall = make(map[int]struct {
			result1 map[string]any
			result2 error
		})
	}
	fake.getAggregateMetricReturnsOnCall[i] = struct {
		result1 map[string]any
		result2 error
	}{result1, result2}
}

func (fake *FakeChangeGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.changedMutex.RLock()
	defer fake.changedMutex.RUnlock()
	fake.getAggregateMetricMutex.RLock()
	defer fake.getAggregateMetricMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChangeGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ app.ChangeGetter = new(FakeChangeGetter)
